// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Start;
float2 size;
float mutPercentage;

uint randState;
uint rand(uint s)
{
    uint state = s;
    s = s * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}


int Alive(float2 id)
{
    if (id.x > 0 && id.x < size.x)
    {
        if (id.y > 0 && id.y < size.y)
        {
            return Start[id.xy].x;
        }        
    }
    return -1;
}

int CheckAlive(float2 id)
{
    bool changed = false;
    int count = 0;
    int state = Start[id.xy].x;
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if (i == 0 && j == 0) continue;
            if (Alive(float2(id.x + i, id.y + j)) == 1) count++;
        }
    }

    if (count > 3 || count < 2)
    {
        state = 0;
        changed = true;
    }
    else if (count == 3) 
    {
        state = 1;
        changed = true;
    }
    
    float r = float(rand(randState)) * (1.0 / 4294967296.0);

    if(r < mutPercentage && changed)
        state = state == 0 ? 1: 0;

    return state;
}


float4 CellToColor(float4 cell, int alive){
    if(alive == 1)
        return float4(1,1,1,1);
    else if(alive == 0)
        return float4(0,0,0,0);
    else 
        return float4(1,0,1,-1);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    randState = (id.y * id.x) >> (id.x && id.y);
    int c = CheckAlive(id.xy);
    Result[id.xy] = CellToColor(Start[id.xy], c);
}
